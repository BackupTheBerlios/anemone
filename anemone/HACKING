Q:	How to write a component?

	Write a class, put it into a component directory and
	Implement the IComponent interface. This means that you
	need a static constructing method accepting the main system
	class as argument.
	
		public static function createInstance(SlimSystem & $system) {
			$c = __CLASS__;
			return new $c();
		}
		
	That's all you need to do. Of course this component won't do
	anything now. To make the component doing something you have
	to either implement an Observer (IObserver), which listens to
	events fired by the main system object or you implement a
	Content component (implementing IContent) which will be
	registered by the main system object and so be available to be
	rendered.
	
	There is another, more special type of components: the components
	implementing the ITplEngine interface. Use this if you want to
	add and use your favourite template engine to this system. Have
	a look at the existing template engine components as a reference.
	
	Keep in mind that the main system will not keep the class once
	constructed. Only content providing classes implementing the
	IContent interface will be registered and kept in an array so that
	their render() method can be called later. All components not
	implementing the IContent interface may be kept by other components
	which are listening to the EVENT_COMPONENT_INCLUDED event. So is
	TplEngineContent doing, which is keeping references to all components
	implementing the ITplEngine interface and the content provider
	components, implementing the IContentProvider interface. So be sure to
	register your component to any event if the instance needs to be kept.

Q:	How to create a component using the system wide setting?

A:	Just extend the class Settable and define the names of the
	variables which should be settable in a (public or protected,
	so that the parent class can access them) variable called
	$settable_properties:

		protected $settable_properties = array("property_one", "property_two");

Q:	How to create a component using the system wide setting if
	this component is extending another class yet?

A:	PHP does not support multiple inheritance. So you will have
	to implement ISettable and do a little bit of coding yourself.
	For example:
	
		public function set($varname, $value) {
			if(in_array($varname, $this->getAvailableProperties()))
				return $this->$varname = $value;
		}
		
		public function get($varname) {
			if(in_array($varname, $this->getAvailableProperties()))
				return $this->$varname;
		}
		
		public function getAvailableProperties() {
			return array("property_one", "property_two");
		}
	
	Of course you can manage this in your class the way you like, you can
	experiment with __get and __set and store the settings in a object
	variable of the type Settable or SettingsStore and redirecting set(),
	get() and getAvailableProperties() to the respective methods of this
	object.